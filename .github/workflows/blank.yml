name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  JF_RT_URL: https://mgmresorts.jfrog.io
  JFROG_USERNAME: 'pkumar@mgmresorts.com'
  RT_REPO_VIRTUAL: 'rafay-poc-addon-configs-generic-dev-local'
  JFROG_CLI_LOG_LEVEL: 'ERROR'
  BUILD_NAME: 'rafay-poc'
  BUILD_ID: "rafay-poc.$(date '+%Y-%m-%d-%H-%M')"
  RBv2_SIGNING_KEY: 'mgmkey'
  DISABLE_JOB_SUMMARY: false;

permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: write # to push updates while version bump and publish to repo, read is fine if there is just read operation‚Äã
  security-events: write # Required for uploading code scanning.
  
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}
          lfs: true

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        with:
          version: 2.71.0
          disable-job-summary: false
        env:
          JF_URL: ${{env.JF_RT_URL}}
          # JFROG_CLI_RELEASES_REPO: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_REPO_VIRTUAL}}' 
          # JFROG_CLI_EXTRACTORS_REMOTE: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_REPO_VIRTUAL}}'
          # JF_GIT_TOKEN: ${{ secrets.GH_PAT }}
          JF_ACCESS_TOKEN: ${{ secrets.JFROG_TOKEN }}

      - name: Configure JFrog CLI for Xray
        run: |
          jf c add xray-server \
            --url=${{env.JF_RT_URL}} \
            --access-token=${{ secrets.JFROG_TOKEN }} \
            --interactive=false

      - name: Run a one-line script
        run: echo Hello, world!

      - name: Xray Scan
        run: |
          jf scan . --extended-table=true

      # - name: üîç Scan Kubernetes YAMLs for misconfigurations
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: config
      #     scan-ref: ./cert-manager/


